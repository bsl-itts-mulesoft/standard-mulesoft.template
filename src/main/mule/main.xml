<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:os="http://www.mulesoft.org/schema/mule/os" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:solace="http://www.mulesoft.org/schema/mule/solace" xmlns:s3="http://www.mulesoft.org/schema/mule/s3" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:oauth="http://www.mulesoft.org/schema/mule/oauth" xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json-logger http://www.mulesoft.org/schema/mule/json-logger/current/mule-json-logger.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
http://www.mulesoft.org/schema/mule/oauth http://www.mulesoft.org/schema/mule/oauth/current/mule-oauth.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/s3 http://www.mulesoft.org/schema/mule/s3/current/mule-s3.xsd
http://www.mulesoft.org/schema/mule/solace http://www.mulesoft.org/schema/mule/solace/current/mule-solace.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd">
	<http:request-config name="HTTP_Request_configuration_basicauth" doc:name="HTTP Request configuration" doc:id="e6546080-8d82-448f-83cf-261aad355559" >
		<http:request-connection protocol="HTTPS" host="mulesoft-anypoint-dev.corp.hpicloud.net" >
			<tls:context >
				<tls:trust-store insecure="true" />
			</tls:context>
			<http:authentication >
				<http:basic-authentication username="~~~Client~~~" password="ab04d63116784e748a07774d8483b805~?~625eB01f21BF4Ca591ad19CDe39f1858" />
			</http:authentication>
		</http:request-connection>
	</http:request-config>
	<flow name="main-templateFlow" doc:id="ef27f82c-a2c3-42b5-965f-9266c5dd0981">
		<http:listener doc:name="Listener" doc:id="06a24b14-9d3b-48ad-b0ee-9105ca3ee194" config-ref="HTTP_Listener_config" path="template/main" />
		<set-variable value="main-templateFlow in process" doc:name="flowstatus" doc:id="e4e46f8f-c4aa-42eb-afe1-874f62c68031" variableName="flowstatus"/>
		<flow-ref doc:name="start_process_flow" doc:id="9fc42104-fdde-4912-afa8-b2ca1eda3638" name="start_process_flow" />
		<error-handler ref="common-error-handler-flow" />
		

</flow>
	<sub-flow name="start_process_flow" doc:id="b86537df-874e-4b83-9d8b-1bb0417db35b" >
		<set-variable value="start_process_flow in progress" doc:name="flowstatus" doc:id="9f28e9da-f4b4-4132-9a4b-285528119fef" variableName="flowstatus"/>
		<set-variable value="${application.name}" doc:name="InterfaceName" doc:id="4d159477-903c-4c86-be63-7bd650148759" variableName="InterfaceName" />
		<db:select doc:name="interface_params table" doc:id="a5fe4704-8837-444c-8d70-b374f80e0899" config-ref="Database_Config" target="ProjectDBdetails">
			<db:sql><![CDATA[SELECT * FROM public.interface_params where interface_name = :InterfaceName;]]></db:sql>
			<db:input-parameters><![CDATA[#[{
	InterfaceName : vars.InterfaceName
}]]]></db:input-parameters>
		</db:select>
		<flow-ref doc:name="maintenancewindow_check_flow" doc:id="c1223aaa-a048-4a6f-9996-140f442f8c0a" name="maintenancewindow_check_flow" />
		<flow-ref doc:name="s3keys_datacache_flow" doc:id="37ac0800-1d02-4629-84a6-a298119a9d25" name="s3keys_datacache_flow" />
		<choice doc:name="MWStatus.downtime_found" doc:id="7ecdd35d-85fa-43d6-822e-b03c0cc46c98" >
			<when expression='#[vars.MWStatus.downtime_found != "true"]'>
				<choice doc:name="Choice" doc:id="5d063362-38f1-4202-9f9b-0567b8805906">
					<when expression='#[vars.ProjectDBdetails.multi_transaction[0] == "1"]' >
						<db:select doc:name="interface_logs" doc:id="011cc2a9-9e9e-4418-bba3-02df9a6babd1" config-ref="Database_Config" target="selectdata">
			<db:sql><![CDATA[select * from public.interface_logs
	where interface_name= :InterfaceName
	and status = :status
	and child = :child]]></db:sql>
			<db:input-parameters><![CDATA[#[%dw 2.0
output application/json
--- 
{
	status : "pending",
	InterfaceName : vars.InterfaceName,
	child : "1"
}]]]></db:input-parameters>
		</db:select>
					</when>
					<otherwise >
						<db:select doc:name="interface_logs" doc:id="7c7c7646-23d8-4329-922a-87e29cc2281e" config-ref="Database_Config" target="selectdata">
			<db:sql><![CDATA[select * from public.interface_logs
	where interface_name= :InterfaceName
	and status = :status
	and child = :child]]></db:sql>
			<db:input-parameters><![CDATA[#[%dw 2.0
output application/json
--- 
{
	status : "pending",
	InterfaceName : vars.InterfaceName,
	child : "0"
}]]]></db:input-parameters>
		</db:select>
		</otherwise>
				</choice>
				<parallel-foreach doc:name="Parallel For Each" doc:id="7c6a53cf-e960-4a9b-9fcf-cab6f49aaa27" collection="#[vars.selectdata]">
			<db:update doc:name="in_process status" doc:id="9d93eff1-1745-428c-9fa3-47e9934c2967" config-ref="Database_Config">
				<db:sql><![CDATA[update public.interface_logs
set status = :status
where id = :id]]></db:sql>
				<db:input-parameters><![CDATA[#[{
	status : "in_progress",
	id : payload.id
}]]]></db:input-parameters>
			</db:update>
		</parallel-foreach>
				<logger level="INFO" doc:name="size of in_progress data" doc:id="60c6ffc9-64dc-411e-bed4-cfb8728ac5df" message="size : #[sizeOf(vars.selectdata)]" />
				<set-variable value="#[%dw 2.0&#10;output application/json&#10;---&#10;[]]" doc:name="file_name_acc" doc:id="3bf07e28-c587-4403-be83-13c84edb8dfe" variableName="file_name_acc"/>
				<choice doc:name="in_progress data exist" doc:id="cc984d75-a1d3-4e75-b17f-276b2eb68e83">
			<when expression="#[sizeOf(vars.selectdata) &gt; 0]">
				<foreach doc:name="For Each" doc:id="6b8504d5-19a5-4c24-9bd3-bc4b250bc5c8" collection="#[vars.selectdata]">
					<flow-ref doc:name="Flow Reference" doc:id="45437d94-e194-4417-92ad-c1046fed03d5" name="LineData_process" />
				</foreach>
			
</when>
		
</choice>
				<logger level="INFO" doc:name="Logger" doc:id="33b277a1-7806-40f1-8dc1-de1fc1ce9a15" message="file_name_acc = #[vars.file_name_acc]"/>
				<parallel-foreach doc:name="Parallel For Each" doc:id="0787a7a6-b115-4e61-8830-d094a9e5570b" collection="#[%dw 2.0&#10;output application/java&#10;---&#10;distinctBy(vars.file_name_acc, ((num, numIndex) -&gt; num))]">
					<set-variable value="#[payload]" doc:name="FileName from acc" doc:id="6a025065-e7be-407a-91fc-5210a28973ba" variableName="FileName" />
					<flow-ref doc:name="header_success_flow" doc:id="9c72fe72-9bf0-4d17-97ca-7792c7c62a1e" name="header_success_flow" />
				</parallel-foreach>
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="679b0016-f96c-4e50-b7d8-90ff872f0d5c" message="Maintenance window found"/>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="s3keys_datacache_flow" doc:id="6769f916-8074-430a-80a0-5e740941db7f">
		<http:request method="GET" doc:name="Request" doc:id="fb131be3-b7ba-4df1-9177-1bc1d7b55cf3" outputMimeType="application/json" target="awsSecrets" url="${secretmanager.url}" config-ref="HTTP_Request_configuration"/>
		<file:write doc:name="Write" doc:id="0ab32900-0776-43c9-ae24-23a38fb3335d" config-ref="File_Config" path="${mule.home}/apps/${app.name}/hp-revenue-incoming1">
			<file:content><![CDATA[#[%dw 2.0
output application/java
import * from dw::core::Binaries
---
fromBase64(vars.awsSecrets.sftpPoly)]]]></file:content>
		</file:write>
	</sub-flow>
	<flow name="LineData_process" doc:id="c59dee9b-c272-4225-ac70-10bd6dfdb267">
		<set-variable value="#[payload]" doc:name="LineData" doc:id="493fbd39-c198-4be9-b0b2-4ad5c4c0ba14" variableName="LineData" />
		<ee:transform doc:name="errorVars and FileName" doc:id="6beb23bc-c611-4224-b1bc-9a02f0059a1a" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="FileName" ><![CDATA[vars.LineData.file_name]]></ee:set-variable>
				<ee:set-variable variableName="errorVars" ><![CDATA[%dw 2.0
import remove from dw::core::Strings
output application/json
---
{
    errorId : uuid(),
    FileName: vars.LineData.file_name,
    errorSource : vars.ProjectDBdetails.interface_name[0],
    errorCode :"",
    target_payload : vars.LineData.file_name,
    id : vars.LineData.id
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<ee:transform doc:name="file name acc" doc:id="b54ce2bd-a69d-4fb0-9e5d-2d3a326022fb" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="file_name_acc" ><![CDATA[%dw 2.0
output application/java
---
vars.file_name_acc + vars.FileName]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<flow-ref doc:name="file_process_flow" doc:id="26465798-e149-4b2f-98dd-59e809df7f3f" name="file_process_flow" />
		<error-handler ref="common-error-handler-flow" />
	</flow>
	<sub-flow name="file_process_flow" doc:id="f49539a1-7657-4c5c-8453-795e46a08966">
		<set-variable value="file_process_flow in progress" doc:name="flowstatus" doc:id="a240af5e-0c28-445c-97df-4a33d385ebb9" variableName="flowstatus"/>
		<flow-ref doc:name="DuplicateCheck_flow" doc:id="c49a2b44-161f-4212-ad3b-d328fcc4718e" name="DuplicateCheck_flow" />
		<choice doc:name="DuplicateCheckStatus" doc:id="39dd1720-96b4-498f-9cd8-81c8d1690e35">
			<when expression="#[isEmpty(vars.DuplicateCheckStatus)]">
				<choice doc:name="Choice" doc:id="5758f38f-3f71-409f-b195-b380f2fa826b">
					<when expression='#[vars.ProjectDBdetails.payload_save_type[0] == "s3"]'>
						<s3:get-object doc:name="S3 file read" doc:id="30724a7d-035d-4148-90e6-d82246b569a2" config-ref="Amazon_S3_Configuration" bucketName="#[p('S3.BucketName') ++ &quot;/&quot; ++ vars.ProjectDBdetails.polling_path[0]]" key="#[vars.FileName]" outputMimeType="application/csv" target="target_payload" />
					</when>
					<otherwise >
						<set-variable value="#[vars.LineData.target_payload]" doc:name="target_payload" doc:id="1c6cdccd-6576-4a2f-80e0-21717949218e" variableName="target_payload"/>
					</otherwise>
				</choice>
				<logger level="INFO" doc:name="Logger" doc:id="681f5ac6-12e7-47e9-a948-81ff76f4ef7b" message="target_payload = #[vars.target_payload]"/>
				<flow-ref doc:name="business_logic_flow" doc:id="a0f94afd-c075-449a-a2ce-c6214813bce0" name="business_logic_flow" />
				<set-variable value="Successfully processed" doc:name="flowstatus" doc:id="bc48e61e-6596-449f-b58e-ea2c5990e1cd" variableName="flowstatus" />
				<flow-ref doc:name="success_notification_flow" doc:id="60e81596-60e3-48ab-a3f2-0b3fd5ffd861" name="success_notification_flow" />
				<logger level="INFO" doc:name="success log" doc:id="afe4ed31-ce2d-41fa-97c6-ce5cd5d71d3f" message='#["completed the " ++ vars.InterfaceName ++ " at " ++ now()]' />
			
</when>
			<otherwise>
				<logger level="INFO" doc:name="duplicate log" doc:id="a7a5a982-9dae-4bf8-a049-19d79e45ed05" message='#["Duplicate file " ++ vars.FileName ++ " processed already at " ++ vars.DuplicateCheckStatus.exe_end_date[0]]' />
				<db:update doc:name="Update interface_logs" doc:id="62611a7d-24bb-4c94-a892-272fbdcfff28" config-ref="Database_Config" >
					<db:sql ><![CDATA[update public.interface_logs
	set status = :status, exe_end_date = :end_time, transaction_desc = :transaction_desc
	where interface_name= interface_name
	and file_name = :file_name
	and id = :id
	]]></db:sql>
					<db:input-parameters ><![CDATA[#[%dw 2.0
import remove from dw::core::Strings
output application/json
var cTime= (now() as String {format: "yyyy-MM-dd'T'HH:mm:ss"} >> "UTC") as DateTime  // {format: "yyyy-MM-dd'T'hh:mm:ss"}
fun timeFormat(t) = ((t as String  ) replace  "T" with " ") replace "Z" with "" // Required format in Postgresql
---
{
	interface_name : vars.InterfaceName,
	status : "duplicate",
	file_name : vars.FileName,
	end_time:  timeFormat(cTime),
	transaction_desc : vars.flowstatus ++ "Duplicate file " ++ vars.FileName ++ " processed already at " ++ vars.DuplicateCheckStatus.exe_end_date[0],
	id : vars.LineData.id
}]]]></db:input-parameters>
				</db:update>
			
</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="business_logic_flow" doc:id="97696668-1623-43af-aa66-790f1df4c0b9">
		<set-variable value="business_login_flow in process" doc:name="flowstatus" doc:id="dba53592-48e6-4d98-bd12-f349dd7576c3" variableName="flowstatus"/>
		<ee:transform doc:name="Transform Message" doc:id="14b4eaa6-a372-4f07-96cd-9dcea07e7858">
						<ee:message>
						</ee:message>
						<ee:variables>
							<ee:set-variable variableName="bapimaterialdata"><![CDATA[%dw 2.0
import remove from dw::core::Strings
output application/json
---
(vars.target_payload splitBy(","))[4] remove "\\n"]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
		<set-variable value="bapi2_extdwl" doc:name="dwlFileName" doc:id="771f6646-9cdb-4eb6-8711-028082eaf6c4" variableName="dwlFileName" />
		<s3:get-object doc:name="dwl file data" doc:id="8bad4258-ecf1-46bd-8b64-cf016e5c7d1b" config-ref="Amazon_S3_Configuration" bucketName="#[p('S3.BucketName') ++ &quot;/&quot; ++ vars.ProjectDBdetails.dwl_path[0]]" key='#["dw_" ++ vars.dwlFileName ++ ".dwl"]' outputMimeType="text/plain" target="dwScript">
				<reconnect count="5" />
			</s3:get-object>
		<ee:dynamic-evaluate doc:name="dwl file" doc:id="ad0f36e3-3299-4f64-830d-d86a1e5a8c4b" expression='#[vars."dwScript"]' />
		<logger level="INFO" doc:name="dwl output" doc:id="708864e9-fbdb-4e0a-ac6b-cb2fd67ccfd9" message="DWLOUTOUT: #[payload]" />
		<ee:transform doc:name="transformed_payload" doc:id="fef2229e-e466-4221-b191-d171e16c303f">
			<ee:message />
			<ee:variables>
				<ee:set-variable variableName="transformed_payload_string"><![CDATA[%dw 2.0
output text/plain
---
payload.^raw as String]]></ee:set-variable>
				<ee:set-variable variableName="transformed_payload"><![CDATA[payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<flow-ref doc:name="Flow Reference target-wrapperSub_Flow" doc:id="78722476-c168-49a5-8e35-439d22df9b18" name="target-wrapperSub_Flow" />
		<http:request method="POST" doc:name="SAP-m9d-bapi-Request" doc:id="06c73284-9b78-4dfd-80d0-a3e7f0c6783f" config-ref="HTTP_Request_configuration_basicauth" path="/s9d-sapi/srfc">
					<http:body><![CDATA[#[%dw 2.0
output application/xml
---
vars.transformed_payload]]]></http:body>
					<http:headers><![CDATA[#[output application/java
---
{
	"client_secret" : "923446fF72cb445381F11aFFb23Fb633",
	"client_id" : "346be509e90b46e0942218bfc90bdbfc"
}]]]></http:headers>
					<http:query-params><![CDATA[#[output application/java
---
{
	"BapiFunctionName" : "BAPI_MATERIAL_GET_DETAIL"
}]]]></http:query-params>
				</http:request>
		<logger level="INFO" doc:name="Logger" doc:id="c2960c09-e9b3-48cd-b757-52f25c970dd4" message="SAP M9d responce : #[payload]"/>
<!-- [STUDIO:"SAP odata GET Request"]		<http:request method="GET" doc:name="SAP odata GET Request" doc:id="fd9e75eb-1874-4c8d-bbe4-58075eed28af" config-ref="HTTP_Request_configuration" path="/sap-odata">
					<http:headers><![CDATA[#[import * from dw::core::URL
output application/java
&#45;&#45;-
{
	"method" : "GET",
	"client_secret" : "923446fF72cb445381F11aFFb23Fb633",
	"path" : "/sap/opu/odata/sap/Z_CHNGDOC_CDPOS_CDS/Z_CHNGDOC_CDPOS/\$count",
	"saphost" : "hpis9das01.corp.hpicloud.net",
	"client_id" : "346be509e90b46e0942218bfc90bdbfc"
}]]]></http:headers>
				</http:request> [STUDIO] -->
		<set-variable value="#[vars.transformed_payload_string]" doc:name="Response" doc:id="a1c48665-1a32-4110-b9be-bc8b0b21900e" variableName="Response" />
		<logger level="INFO" doc:name="response" doc:id="844a7d8a-cbb5-4c8f-9703-a35a31341821" message="response output : #[vars.Response]" />
	</sub-flow>
	<sub-flow name="success_notification_flow" doc:id="a7909642-86e2-4a00-b1b5-ec4ace5bd9a2">
		<db:update doc:name="Update interface_logs" doc:id="8240befa-99f9-432c-b32e-a6ee6f7cedb8" config-ref="Database_Config" >
			<db:sql ><![CDATA[update public.interface_logs
	set status = :status, exe_end_date = :end_time, 
	transaction_desc = :transaction_desc,
	transformed_target_payload = :transformed_target_payload
	where interface_name= interface_name
	and file_name = :file_name
	and id = :id
	]]></db:sql>
			<db:input-parameters ><![CDATA[#[%dw 2.0
import remove from dw::core::Strings
output application/json
var cTime= (now() as String {format: "yyyy-MM-dd'T'HH:mm:ss"} >> "UTC") as DateTime  // {format: "yyyy-MM-dd'T'hh:mm:ss"}
fun timeFormat(t) = ((t as String  ) replace  "T" with " ") replace "Z" with "" // Required format in Postgresql
---
{
	interface_name : vars.InterfaceName,
	status : "success",
	file_name : vars.FileName,
	end_time:  timeFormat(cTime),
	transaction_desc : vars.flowstatus ++ " response :" ++ vars.Response,
	id : vars.LineData.id,
	transformed_target_payload :vars.transformed_payload_string default null
}]]]></db:input-parameters>
		</db:update>
	</sub-flow>
	<sub-flow name="header_success_flow" doc:id="82a7484c-e25e-4daa-8bf3-2e3eaaaba73f">
		<choice doc:name="Choice" doc:id="531354d9-0e1d-4f26-878e-4f30e2f31cf7">
			<when expression='#[vars.ProjectDBdetails.multi_transaction[0] == "1"]'>
				<db:update doc:name="header success" doc:id="68ea72a0-7398-4b6c-be6f-fde234670a51" config-ref="Database_Config">
					<db:sql><![CDATA[UPDATE public.interface_logs
set status = 'success'
where interface_name= :interface_name
	and file_name = :file_name
	and child = '0'
and (SELECT  count(status) FROM public.interface_logs
	where interface_name= :interface_name
	and file_name = :file_name
	and child = '1'
	and status in ('error','in_progress','pending')) = 0]]></db:sql>
					<db:input-parameters><![CDATA[#[{
	interface_name : vars.InterfaceName,
	file_name : vars.FileName
}]]]></db:input-parameters>
				</db:update>
				<db:update doc:name="header error" doc:id="867b2f98-753e-4997-ad80-801c184eac29" config-ref="Database_Config">
					<db:sql><![CDATA[UPDATE public.interface_logs
set status = 'error'
where interface_name= :interface_name
	and file_name = :file_name
	and child = '0'
and (SELECT  count(status) FROM public.interface_logs
	where interface_name= :interface_name
	and file_name = :file_name
	and child = '1'
	and status in ('error','in_progress','pending')) > 0]]></db:sql>
					<db:input-parameters><![CDATA[#[{
	interface_name : vars.InterfaceName,
	file_name : vars.FileName
}]]]></db:input-parameters>
				</db:update>
				<logger level="INFO" doc:name="status update" doc:id="afedd82b-ff1f-4eda-82cb-93fba0c27f70" message="status update done for file #[vars.FileName] where id  is #[vars.LineData.id]" />
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger" doc:id="6ccd4965-b7b5-4ebe-9e41-bb47627553f4" />
			</otherwise>
		</choice>
	</sub-flow>
</mule>
